/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.0-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.github.cloudiator.rest.api;

import io.github.cloudiator.rest.model.Text;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "secureStore", description = "the secureStore API")
public interface SecureStoreApi {

    @ApiOperation(value = "", nickname = "deleteSecure", notes = "", authorizations = {
        @Authorization(value = "ApiKeyAuth")
    }, tags={ "security", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/secureStore/{key}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSecure(@ApiParam(value = "Key of the stored variable ",required=true) @PathVariable("key") String key);


    @ApiOperation(value = "", nickname = "retrieveSecure", notes = "Retrieves the stored value. ", response = Text.class, authorizations = {
        @Authorization(value = "ApiKeyAuth")
    }, tags={ "security", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Text.class) })
    @RequestMapping(value = "/secureStore/{key}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Text> retrieveSecure(@ApiParam(value = "Key of the stored variable ",required=true) @PathVariable("key") String key);


    @ApiOperation(value = "", nickname = "storeSecure", notes = "", response = Text.class, authorizations = {
        @Authorization(value = "ApiKeyAuth")
    }, tags={ "security", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Text.class) })
    @RequestMapping(value = "/secureStore/{key}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Text> storeSecure(@ApiParam(value = "Key of the stored variable ",required=true) @PathVariable("key") String key,@ApiParam(value = "Value of the stored variable " ,required=true )  @Valid @RequestBody Text value);

}
